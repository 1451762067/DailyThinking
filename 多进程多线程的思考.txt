我知道今天才意识到，多线程的好处并不是所谓的多线程能让程序立马具备多并发的处理能力，   
要是知道对于现代的分时多任务系统（假设单核CPU），那所有的任务依旧是交替执行，   
消耗的总时间依然是一样的，如果线程太多反而因为切换而消耗掉更多的资源，包括时间。   

用过Nginx的人都知道，ng开的进程和线程并不多，但依然具备十分强大的并发处理能力，   
为什么呢，因为ng用的基本都是非阻塞IO，不会产生等待问题，但是完全使用非阻塞的IO，   
通常会带来复杂的编程模型和较难维护的代码，非阻塞IO的编程模型往往和异步有关系，   
而人的思维方式更趋向于同步，即事情串行着处理，这件事做完再做下一件事儿，因此不
可避免地在实践中使用大量的等待，比如等待网络数据到达，等待设备准备好等，如果不
开多线程，那么意味这后续的任务都会因为你的等待而延迟，等待的时候往往意味这进程/线
程被挂起，白白浪费了CPU时间，如果开启了多线程，那么任务可以因为等待而挂起，将CPU
让给其他任务，保证CPU不会空闲而得到充分利用。   

因为我认为开启多线程/进程的根本原因是在同步任务中，让线程/进程挂起，让出CPU，
从而达到计算资源的充分利用，实现所谓的“大并发”。
